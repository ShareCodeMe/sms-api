generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  UNKNOW
}

enum UserGender {
  MALE
  FEMALE
  UNKNOW
}

enum UserStatus {
  ACTIVE
  IN_ACTIVE
  BANNED
  UNKNOW
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(UNKNOW)
  gender                UserGender             @default(UNKNOW)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  status                UserStatus             @default(UNKNOW)
  teacher               Teachers[]
  student               Students[]
  parent                Parents[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Teachers {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  name      String?
  phone     String? @unique
  address   String?
  bloodType String?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

  subject Subject[]
  lesson     Lessons[]     @relation("lessontoteacher")
  assignment Assignments[] @relation("assignmenttoteacher")

  @@unique([userId])
}

model Students {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  name      String?
  phone     String? @unique
  address   String?
  bloodType String?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

  parentId String?
  parent   Parents? @relation(fields: [parentId], references: [id])

  onClassroom OnClassroom[]
  result      Results[]     @relation("studenttoresult")
  attendance  Attendances[] @relation("studenttoattendance")
  gradeId     String?
  Grade       Grade?        @relation(fields: [gradeId], references: [id])

  @@unique([userId])
}

model Parents {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  name      String?
  phone     String?    @unique
  address   String?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()

  students  Students[]

  @@unique([userId])
}

model Grade {
  id    String @id @default(uuid())
  level Int

  students Students[]
  classess Classrooms[]

  @@unique([level])
}

model Classrooms {
  id                 String         @id @default(uuid())
  name               String
  cap                String
  schedule           Schedule[]     @relation("classtoschedule")
  assingment         Assignments[]  @relation("classroomstoassingment")
  studentOnclassroom OnClassroom[]
  Event              Event[]
  Announcement       Announcement[]
  gradeId            String
  Grade              Grade          @relation(fields: [gradeId], references: [id])

  @@unique([gradeId])
}

model OnClassroom {
  id          String     @id @default(uuid())
  userId      String
  classroomId String
  student     Students   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classroom   Classrooms @relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, classroomId])
}

model Subject {
  id       String        @id @default(uuid())
  name     String

  teacher  Teachers[]
  lesson   Lessons[]
}

model Lessons {
  id         String         @id @default(uuid())
  name       String
  teacher    Teachers       @relation("lessontoteacher", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId  String
  subject    Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId  String
  schedule   Schedule[]     @relation("lessontoschedule")
  assingment Assignments[]  @relation("lessontoassingment")
  attendance Attendances[]  @relation("lessontoattendance")
  exam       Exams[]        @relation("lessontoexam")

  @@index([teacherId])
}

model Schedule {
  id        String     @id @default(uuid())
  lessonId  String
  classId   String
  day       DateTime
  time      String
  lesson    Lessons    @relation("lessontoschedule", fields: [lessonId], references: [id], onDelete: Cascade)
  classroom Classrooms @relation("classtoschedule", fields: [classId], references: [id], onDelete: Cascade)

  @@index([lessonId, classId])
}

model Assignments {
  id       String   @id @default(uuid())
  task     String
  deadline DateTime
  fileUrl  String?
  time     String

  lessonId  String
  classId   String
  createBy  String
  lesson    Lessons    @relation("lessontoassingment", fields: [lessonId], references: [id], onDelete: Cascade)
  classroom Classrooms @relation("classroomstoassingment", fields: [classId], references: [id], onDelete: Cascade)
  teacher   Teachers   @relation("assignmenttoteacher", fields: [createBy], references: [id], onDelete: Cascade)

  result Results[] @relation("assignmenttoresult")

  @@index([lessonId, classId, createBy])
}

model Attendances {
  id      String   @id @default(uuid())
  date    DateTime
  present Boolean

  studentId String
  lessonId  String
  student   Students @relation("studenttoattendance", fields: [studentId], references: [id])
  lesson    Lessons  @relation("lessontoattendance", fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([studentId, lessonId])
}

model Results {
  id    String @id @default(uuid())
  score Int

  studentId    String
  examId       String?
  assignmentId String?
  student      Students     @relation("studenttoresult", fields: [studentId], references: [id])
  exam         Exams?       @relation("examtoresult", fields: [examId], references: [id])
  assignment   Assignments? @relation("assignmenttoresult", fields: [assignmentId], references: [id])

  @@index([examId, studentId, assignmentId])
}

model Exams {
  id        String   @id @default(uuid())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId String
  lesson   Lessons   @relation("lessontoexam", fields: [lessonId], references: [id])
  results  Results[] @relation("examtoresult")

  @@index([lessonId])
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId String?
  class   Classrooms? @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime

  classId String?
  class   Classrooms? @relation(fields: [classId], references: [id])

  @@index([classId])
}
